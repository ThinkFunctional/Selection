# Selection Unit Test
# 9/29/2022 @ 12:22 pm

# Helper Functions
import operator as op

eq_comp = op.__eq__
is_comp = op.is_

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if isinstance(expected, (int, float, complex)):
        if not isinstance(actual, (int, float, complex)):
            return False
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of value: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify equality of value and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            test_file.write("\nFunction: \"" + unit.name + "\"\n")
            for case in unit.cases:
                self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                # Now flush the contents of the write buffer so that if a function hangs,
                # the report will show precisely where it happened.
                test_file.flush()
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except:
                    test_file.write("Crash! No point!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write(" Perfection!")
        summary = "Final Score: " + str(self.score) + "/" + str(self.num_tests)
        test_file.write("\n\n" + summary)
        print(summary)

# Test Cases (tc)
# Format: a list of tuples where each tuple
# gives an argument (or tuple of arguments)
# and the expected return for that argument.
pw_def_tc = [(-144, 141), (-1, 2), (0, 3), (1, 1), (144, 67.5)]
abs_val_tc = [(-12, 12), (12, 12), (0, 0)]
implies_tc = [((True, True), True), ((True, False), False), ((False, True), True), ((False, False), True)]
neither_nor_tc = [((True, True), False), ((True, False), False), ((False, True), False), ((False, False), True)]
signs_tc = [(-12, -1), (3, 1), (0, 0)]
sign_count_tc = [([1], (0, 0, 1)), ([], (0, 0, 0)), ([-1], (1, 0, 0)), ([12, 28, 0, 0, -12, -28, 0], (2, 3, 2))]
letter_grade_tc = [(-1, "NaG"), (101, "NaG"), (100, "A"), (72, "C")]
letter_grade_plus_tc = [(100, "A+"), (99, "A+"), (98.9, "A"), (80.5, "B-"), (62, "D"), (59.999, "F")]
is_tri_tc = [((-1, 1, 1), False), ((1, 1, 1), True), ((5, 11, 6), False)]
order_three_tc = [((1, 1, 1), (1, 1, 1)), ((1, 2, 3), (3, 2, 1)), ((0, -1, 1), (1, 0, -1))]
extrema_tc = [([12], (12, 12)), ([-13, -17, 4, -44, 37, -48, 22, -49, -7, 34, -4, -2, 13, 44, -32, 31, 48, 18, 43, -17, 34, -37, 44, 25, 1, 26, -6, 34], (48, -49))]
tri_test_tc = [((12, 5, 12), 'acute'), ((12, 5, 14), 'obtuse'), ((13, 5, 12), 'right')]
digit_count_tc = [(1, 1), (12, 2), (123456, 6)]
leap_year_tc = [(400, True), (201, False), (300, False), (304, True)]
sq_rt_tc = [(0, 0), (1, 1), (12, 3.4641016151377544), (12**9, 71831.61109149648)]
is_prime_tc = [(1, False), (2, True), (3, True), (4, False), (104729, True), (123456789, False)]
hailstone_tc = [(1, [1]), (2, [2, 1]), (3, [3, 10, 5, 16, 8, 4, 2, 1]),
                (27, [27, 82, 41, 124, 62, 31, 94, 47, 142, 71, 214, 107, 322, 161, 484, 242, 121, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350, 175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167, 502, 251, 754, 377, 1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479, 1438, 719, 2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822, 911, 2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577, 1732, 866, 433, 1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1])]
LCM_tc = [((1, 1), 1), ((1, 3), 3), ((12, 15), 60), ((23, 99), 2277)]
GCF_tc = [((1, 1), 1), ((12, 15), 3), ((99, 23), 1), ((561, 1938), 51)]
reduce_frac_tc = [((1, 1), (1, 1)), ((1, 3), (1, 3)), ((12, 15), (4, 5))]
add_fracs_tc = [((1, 1, 1, 1), (2, 1)), ((1, 2, 1, 3), (5, 6)), ((12, 17, 27, 219), (1029, 1241))]
pyth_trip_tc = [(200, 127), (1000, 881)]

# Create Units
# This block will cause a crash if you haven't created all of the required functions.
# Format: Unit(func, name, cases, is_polyadic, is_mutator, test_type)
# Test types: eq_comp, is_comp, eq_not_is, elems_comp
pw_def_unit = Unit(pw_def, "piecewise defined function", pw_def_tc, False, False, eq_comp)
abs_val_unit = Unit(abs_val, "absolute value", abs_val_tc, False, False, eq_comp)
implies_unit = Unit(implies, "implies", implies_tc, True, False, eq_comp)
neither_nor_unit = Unit(neither_nor, "neither nor", neither_nor_tc, True, False, eq_comp)
sign_unit = Unit(sign, "sign function", signs_tc, False, False, eq_comp)
sign_count_unit = Unit(sign_count, "sign count", sign_count_tc, False, False, eq_comp)
letter_grade_unit = Unit(letter_grade, "letter grades", letter_grade_tc, False, False, eq_comp)
letter_grade_plus_unit = Unit(letter_grade_plus, "letter grades plus", letter_grade_plus_tc, False, False, eq_comp)
is_tri_unit = Unit(is_tri, "can it be a triangle", is_tri_tc, True, False, eq_comp)
order_three_unit = Unit(order_three, "order three", order_three_tc, True, False, eq_comp)
extrema_unit = Unit(extrema, "max and min elements", extrema_tc, False, False, eq_comp)
extrema_tc = [([12], (12, 12)), ([-13, -17, 4, -44, 37, -48, 22, -49, -7, 34, -4, -2, 13, 44, -32, 31, 48, 18, 43, -17, 34, -37, 44, 25, 1, 26, -6, 34], (48, -49))]
tri_test_unit = Unit(tri_test, "triangle test - right, acute or obtuse", tri_test_tc, True, False, eq_comp)
digit_count_unit = Unit(digit_count, "digit count", digit_count_tc, False, False, eq_comp)
leap_year_unit = Unit(leap_year, "leap year", leap_year_tc, False, False, eq_comp)
sq_rt_unit = Unit(sq_rt, "square root", sq_rt_tc, False, False, approx_eq)
is_prime_unit = Unit(is_prime, "is it prime", is_prime_tc, False, False, eq_comp)
hailstone_unit = Unit(hailstone, "hailstone sequence", hailstone_tc, False, False, eq_comp)
LCM_unit = Unit(LCM, "least common multiple", LCM_tc, True, False, eq_comp)
GCF_unit = Unit(GCF, "greatest common factor", GCF_tc, True, False, eq_comp)
reduce_frac_unit = Unit(reduce_frac, "reduce a fraction", reduce_frac_tc, True, False, eq_comp)
add_fracs_unit = Unit(add_fracs, "add fractions", add_fracs_tc, True, False, eq_comp)
pyth_trip_unit = Unit(pyth_trip, "pythagorean triples", pyth_trip_tc, False, False, eq_comp)

# Unit Test List
units = [pw_def_unit, abs_val_unit, implies_unit, neither_nor_unit, sign_unit, sign_count_unit, letter_grade_unit,
         letter_grade_plus_unit, is_tri_unit, order_three_unit, extrema_unit, tri_test_unit, digit_count_unit, leap_year_unit,
         sq_rt_unit, is_prime_unit, hailstone_unit, LCM_unit, GCF_unit, reduce_frac_unit, add_fracs_unit, pyth_trip_unit]

# Create Unit Test
unit_test = UnitTest("Selection Unit Test", units)

# Test!
unit_test.run_test()
